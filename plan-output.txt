[0m[1mdata.azurerm_virtual_network.hub: Reading...[0m[0m
[0m[1mdata.azurerm_client_config.current: Reading...[0m[0m
[0m[1mdata.azurerm_client_config.current: Read complete after 0s [id=Y2xpZW50Q29uZmlncy9jbGllbnRJZD0wNGIwNzc5NS04ZGRiLTQ2MWEtYmJlZS0wMmY5ZTFiZjdiNDY7b2JqZWN0SWQ9M2NlYTRlOWMtMDhkOS00MjEyLTk1ZmItZjY1MzA2YjJlYjk4O3N1YnNjcmlwdGlvbklkPTI5Zjg5ZTlhLTNlNTUtNGRmOC1iZjUwLWVhYjAyZTk3OTcwNDt0ZW5hbnRJZD01NGRiZDFmZS1jMmRiLTRmODUtYjE5ZC1iMThjMWNjM2ZhZTg=][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform planned the following actions, but then encountered a problem:

[1m  # azurerm_key_vault.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_key_vault" "aks" {
      [32m+[0m[0m access_policy                 = [
          [32m+[0m[0m {
              [32m+[0m[0m key_permissions    = [
                  [32m+[0m[0m "Get",
                  [32m+[0m[0m "List",
                  [32m+[0m[0m "Update",
                  [32m+[0m[0m "Create",
                  [32m+[0m[0m "Import",
                  [32m+[0m[0m "Delete",
                  [32m+[0m[0m "Recover",
                  [32m+[0m[0m "Backup",
                  [32m+[0m[0m "Restore",
                ]
              [32m+[0m[0m object_id          = "3cea4e9c-08d9-4212-95fb-f65306b2eb98"
              [32m+[0m[0m secret_permissions = [
                  [32m+[0m[0m "Get",
                  [32m+[0m[0m "List",
                  [32m+[0m[0m "Set",
                  [32m+[0m[0m "Delete",
                  [32m+[0m[0m "Recover",
                  [32m+[0m[0m "Backup",
                  [32m+[0m[0m "Restore",
                ]
              [32m+[0m[0m tenant_id          = "54dbd1fe-c2db-4f85-b19d-b18c1cc3fae8"
            },
        ]
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "eastus"
      [32m+[0m[0m name                          = "kv-akssparkcluster"
      [32m+[0m[0m public_network_access_enabled = true
      [32m+[0m[0m purge_protection_enabled      = false
      [32m+[0m[0m resource_group_name           = "rg-aks-spark-prod"
      [32m+[0m[0m sku_name                      = "standard"
      [32m+[0m[0m soft_delete_retention_days    = 7
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
      [32m+[0m[0m tenant_id                     = "54dbd1fe-c2db-4f85-b19d-b18c1cc3fae8"
      [32m+[0m[0m vault_uri                     = (known after apply)
    }

[1m  # azurerm_key_vault_access_policy.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_key_vault_access_policy" "aks" {
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m key_vault_id       = (known after apply)
      [32m+[0m[0m object_id          = (known after apply)
      [32m+[0m[0m secret_permissions = [
          [32m+[0m[0m "Get",
          [32m+[0m[0m "List",
        ]
      [32m+[0m[0m tenant_id          = "54dbd1fe-c2db-4f85-b19d-b18c1cc3fae8"
    }

[1m  # azurerm_kubernetes_cluster.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "aks" {
      [32m+[0m[0m api_server_authorized_ip_ranges     = (known after apply)
      [32m+[0m[0m automatic_channel_upgrade           = "patch"
      [32m+[0m[0m azure_policy_enabled                = true
      [32m+[0m[0m current_kubernetes_version          = (known after apply)
      [32m+[0m[0m dns_prefix_private_cluster          = "aks-spark-cluster-dns"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m http_application_routing_zone_name  = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m image_cleaner_enabled               = false
      [32m+[0m[0m image_cleaner_interval_hours        = 48
      [32m+[0m[0m kube_admin_config                   = (sensitive value)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (sensitive value)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = "1.28.5"
      [32m+[0m[0m location                            = "eastus"
      [32m+[0m[0m name                                = "aks-spark-cluster"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m node_resource_group_id              = (known after apply)
      [32m+[0m[0m oidc_issuer_enabled                 = true
      [32m+[0m[0m oidc_issuer_url                     = (known after apply)
      [32m+[0m[0m portal_fqdn                         = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = true
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m public_network_access_enabled       = true
      [32m+[0m[0m resource_group_name                 = "rg-aks-spark-prod"
      [32m+[0m[0m role_based_access_control_enabled   = true
      [32m+[0m[0m run_command_enabled                 = true
      [32m+[0m[0m sku_tier                            = "Free"
      [32m+[0m[0m support_plan                        = "KubernetesOfficial"
      [32m+[0m[0m tags                                = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
      [32m+[0m[0m workload_identity_enabled           = true

      [32m+[0m[0m azure_active_directory_role_based_access_control {
          [32m+[0m[0m azure_rbac_enabled = true
          [32m+[0m[0m managed            = true
          [32m+[0m[0m tenant_id          = "54dbd1fe-c2db-4f85-b19d-b18c1cc3fae8"
        }

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m enable_auto_scaling          = true
          [32m+[0m[0m enable_node_public_ip        = false
          [32m+[0m[0m kubelet_disk_type            = (known after apply)
          [32m+[0m[0m max_count                    = 5
          [32m+[0m[0m max_pods                     = (known after apply)
          [32m+[0m[0m min_count                    = 1
          [32m+[0m[0m name                         = "system"
          [32m+[0m[0m node_count                   = 3
          [32m+[0m[0m node_labels                  = {
              [32m+[0m[0m "environment"                           = "production"
              [32m+[0m[0m "kubernetes.azure.com/scalesetpriority" = "regular"
              [32m+[0m[0m "nodepool-type"                         = "system"
              [32m+[0m[0m "nodepoolos"                            = "linux"
            }
          [32m+[0m[0m only_critical_addons_enabled = true
          [32m+[0m[0m orchestrator_version         = (known after apply)
          [32m+[0m[0m os_disk_size_gb              = 128
          [32m+[0m[0m os_disk_type                 = "Managed"
          [32m+[0m[0m os_sku                       = (known after apply)
          [32m+[0m[0m scale_down_mode              = "Delete"
          [32m+[0m[0m tags                         = {
              [32m+[0m[0m "Environment" = "Production"
              [32m+[0m[0m "ManagedBy"   = "Terraform"
              [32m+[0m[0m "Workload"    = "ApacheSpark"
            }
          [32m+[0m[0m type                         = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled            = false
          [32m+[0m[0m vm_size                      = "Standard_D8s_v3"
          [32m+[0m[0m vnet_subnet_id               = (known after apply)
          [32m+[0m[0m workload_runtime             = (known after apply)
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m key_vault_secrets_provider {
          [32m+[0m[0m secret_identity          = (known after apply)
          [32m+[0m[0m secret_rotation_enabled  = true
          [32m+[0m[0m secret_rotation_interval = "2m"
        }

      [32m+[0m[0m maintenance_window {
          [32m+[0m[0m allowed {
              [32m+[0m[0m day   = "Sunday"
              [32m+[0m[0m hours = [
                  [32m+[0m[0m 2,
                  [32m+[0m[0m 6,
                ]
            }
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip          = "10.250.0.10"
          [32m+[0m[0m docker_bridge_cidr      = (known after apply)
          [32m+[0m[0m ebpf_data_plane         = (known after apply)
          [32m+[0m[0m ip_versions             = (known after apply)
          [32m+[0m[0m load_balancer_sku       = "standard"
          [32m+[0m[0m network_data_plane      = (known after apply)
          [32m+[0m[0m network_mode            = (known after apply)
          [32m+[0m[0m network_plugin          = "azure"
          [32m+[0m[0m network_policy          = "azure"
          [32m+[0m[0m outbound_ip_address_ids = (known after apply)
          [32m+[0m[0m outbound_ip_prefix_ids  = (known after apply)
          [32m+[0m[0m outbound_type           = "loadBalancer"
          [32m+[0m[0m pod_cidr                = (known after apply)
          [32m+[0m[0m pod_cidrs               = (known after apply)
          [32m+[0m[0m service_cidr            = "10.250.0.0/16"
          [32m+[0m[0m service_cidrs           = (known after apply)

          [32m+[0m[0m load_balancer_profile {
              [32m+[0m[0m effective_outbound_ips      = (known after apply)
              [32m+[0m[0m idle_timeout_in_minutes     = 30
              [32m+[0m[0m managed_outbound_ip_count   = 2
              [32m+[0m[0m managed_outbound_ipv6_count = (known after apply)
              [32m+[0m[0m outbound_ports_allocated    = 8000
            }
        }

      [32m+[0m[0m oms_agent {
          [32m+[0m[0m log_analytics_workspace_id = (known after apply)
          [32m+[0m[0m oms_agent_identity         = (known after apply)
        }
    }

[1m  # azurerm_kubernetes_cluster_node_pool.spark[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster_node_pool" "spark" {
      [32m+[0m[0m enable_auto_scaling    = true
      [32m+[0m[0m enable_host_encryption = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m kubelet_disk_type      = (known after apply)
      [32m+[0m[0m kubernetes_cluster_id  = (known after apply)
      [32m+[0m[0m max_count              = 10
      [32m+[0m[0m max_pods               = (known after apply)
      [32m+[0m[0m min_count              = 4
      [32m+[0m[0m mode                   = "User"
      [32m+[0m[0m name                   = "spark"
      [32m+[0m[0m node_count             = 3
      [32m+[0m[0m node_labels            = {
          [32m+[0m[0m "compute-type"  = "general-purpose"
          [32m+[0m[0m "environment"   = "production"
          [32m+[0m[0m "nodepool-type" = "spark"
          [32m+[0m[0m "workload-type" = "apache-spark"
        }
      [32m+[0m[0m node_taints            = [
          [32m+[0m[0m "workload=spark:NoSchedule",
        ]
      [32m+[0m[0m orchestrator_version   = (known after apply)
      [32m+[0m[0m os_disk_size_gb        = 256
      [32m+[0m[0m os_disk_type           = "Managed"
      [32m+[0m[0m os_sku                 = (known after apply)
      [32m+[0m[0m os_type                = "Linux"
      [32m+[0m[0m priority               = "Regular"
      [32m+[0m[0m scale_down_mode        = "Delete"
      [32m+[0m[0m spot_max_price         = -1
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "NodePool"    = "Spark"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
      [32m+[0m[0m ultra_ssd_enabled      = false
      [32m+[0m[0m vm_size                = "Standard_D8s_v3"
      [32m+[0m[0m vnet_subnet_id         = (known after apply)
    }

[1m  # azurerm_log_analytics_solution.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_solution" "aks" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m location              = "eastus"
      [32m+[0m[0m resource_group_name   = "rg-aks-spark-prod"
      [32m+[0m[0m solution_name         = "ContainerInsights"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
      [32m+[0m[0m workspace_name        = "law-aks-spark-cluster"
      [32m+[0m[0m workspace_resource_id = (known after apply)

      [32m+[0m[0m plan {
          [32m+[0m[0m name      = (known after apply)
          [32m+[0m[0m product   = "OMSGallery/ContainerInsights"
          [32m+[0m[0m publisher = "Microsoft"
        }
    }

[1m  # azurerm_log_analytics_workspace.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_workspace" "aks" {
      [32m+[0m[0m allow_resource_only_permissions = true
      [32m+[0m[0m daily_quota_gb                  = -1
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m internet_ingestion_enabled      = true
      [32m+[0m[0m internet_query_enabled          = true
      [32m+[0m[0m local_authentication_disabled   = false
      [32m+[0m[0m location                        = "eastus"
      [32m+[0m[0m name                            = "law-aks-spark-cluster"
      [32m+[0m[0m primary_shared_key              = (sensitive value)
      [32m+[0m[0m resource_group_name             = "rg-aks-spark-prod"
      [32m+[0m[0m retention_in_days               = 30
      [32m+[0m[0m secondary_shared_key            = (sensitive value)
      [32m+[0m[0m sku                             = "PerGB2018"
      [32m+[0m[0m tags                            = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
      [32m+[0m[0m workspace_id                    = (known after apply)
    }

[1m  # azurerm_network_security_group.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_network_security_group" "aks" {
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "eastus"
      [32m+[0m[0m name                = "nsg-vnet-aks-spark-spoke"
      [32m+[0m[0m resource_group_name = "rg-aks-spark-prod"
      [32m+[0m[0m security_rule       = [
          [32m+[0m[0m {
              [32m+[0m[0m access                                     = "Allow"
              [32m+[0m[0m description                                = ""
              [32m+[0m[0m destination_address_prefix                 = "*"
              [32m+[0m[0m destination_address_prefixes               = []
              [32m+[0m[0m destination_application_security_group_ids = []
              [32m+[0m[0m destination_port_range                     = ""
              [32m+[0m[0m destination_port_ranges                    = [
                  [32m+[0m[0m "1521",
                  [32m+[0m[0m "1522",
                ]
              [32m+[0m[0m direction                                  = "Inbound"
              [32m+[0m[0m name                                       = "AllowOracleFromOnPrem"
              [32m+[0m[0m priority                                   = 210
              [32m+[0m[0m protocol                                   = "Tcp"
              [32m+[0m[0m source_address_prefix                      = "10.0.0.0/16"
              [32m+[0m[0m source_address_prefixes                    = []
              [32m+[0m[0m source_application_security_group_ids      = []
              [32m+[0m[0m source_port_range                          = "*"
              [32m+[0m[0m source_port_ranges                         = []
            },
          [32m+[0m[0m {
              [32m+[0m[0m access                                     = "Allow"
              [32m+[0m[0m description                                = ""
              [32m+[0m[0m destination_address_prefix                 = "*"
              [32m+[0m[0m destination_address_prefixes               = []
              [32m+[0m[0m destination_application_security_group_ids = []
              [32m+[0m[0m destination_port_range                     = "*"
              [32m+[0m[0m destination_port_ranges                    = []
              [32m+[0m[0m direction                                  = "Inbound"
              [32m+[0m[0m name                                       = "AllowAzureLoadBalancerInBound"
              [32m+[0m[0m priority                                   = 110
              [32m+[0m[0m protocol                                   = "*"
              [32m+[0m[0m source_address_prefix                      = "AzureLoadBalancer"
              [32m+[0m[0m source_address_prefixes                    = []
              [32m+[0m[0m source_application_security_group_ids      = []
              [32m+[0m[0m source_port_range                          = "*"
              [32m+[0m[0m source_port_ranges                         = []
            },
          [32m+[0m[0m {
              [32m+[0m[0m access                                     = "Allow"
              [32m+[0m[0m description                                = ""
              [32m+[0m[0m destination_address_prefix                 = "*"
              [32m+[0m[0m destination_address_prefixes               = []
              [32m+[0m[0m destination_application_security_group_ids = []
              [32m+[0m[0m destination_port_range                     = "*"
              [32m+[0m[0m destination_port_ranges                    = []
              [32m+[0m[0m direction                                  = "Inbound"
              [32m+[0m[0m name                                       = "AllowHubVNetInBound"
              [32m+[0m[0m priority                                   = 220
              [32m+[0m[0m protocol                                   = "*"
              [32m+[0m[0m source_address_prefix                      = "10.248.0.0/23"
              [32m+[0m[0m source_address_prefixes                    = []
              [32m+[0m[0m source_application_security_group_ids      = []
              [32m+[0m[0m source_port_range                          = "*"
              [32m+[0m[0m source_port_ranges                         = []
            },
          [32m+[0m[0m {
              [32m+[0m[0m access                                     = "Allow"
              [32m+[0m[0m description                                = ""
              [32m+[0m[0m destination_address_prefix                 = "*"
              [32m+[0m[0m destination_address_prefixes               = []
              [32m+[0m[0m destination_application_security_group_ids = []
              [32m+[0m[0m destination_port_range                     = "443"
              [32m+[0m[0m destination_port_ranges                    = []
              [32m+[0m[0m direction                                  = "Inbound"
              [32m+[0m[0m name                                       = "AllowHTTPSFromOnPrem"
              [32m+[0m[0m priority                                   = 200
              [32m+[0m[0m protocol                                   = "Tcp"
              [32m+[0m[0m source_address_prefix                      = "10.0.0.0/16"
              [32m+[0m[0m source_address_prefixes                    = []
              [32m+[0m[0m source_application_security_group_ids      = []
              [32m+[0m[0m source_port_range                          = "*"
              [32m+[0m[0m source_port_ranges                         = []
            },
          [32m+[0m[0m {
              [32m+[0m[0m access                                     = "Allow"
              [32m+[0m[0m description                                = ""
              [32m+[0m[0m destination_address_prefix                 = "VirtualNetwork"
              [32m+[0m[0m destination_address_prefixes               = []
              [32m+[0m[0m destination_application_security_group_ids = []
              [32m+[0m[0m destination_port_range                     = "*"
              [32m+[0m[0m destination_port_ranges                    = []
              [32m+[0m[0m direction                                  = "Inbound"
              [32m+[0m[0m name                                       = "AllowVnetInBound"
              [32m+[0m[0m priority                                   = 100
              [32m+[0m[0m protocol                                   = "*"
              [32m+[0m[0m source_address_prefix                      = "VirtualNetwork"
              [32m+[0m[0m source_address_prefixes                    = []
              [32m+[0m[0m source_application_security_group_ids      = []
              [32m+[0m[0m source_port_range                          = "*"
              [32m+[0m[0m source_port_ranges                         = []
            },
          [32m+[0m[0m {
              [32m+[0m[0m access                                     = "Deny"
              [32m+[0m[0m description                                = ""
              [32m+[0m[0m destination_address_prefix                 = "*"
              [32m+[0m[0m destination_address_prefixes               = []
              [32m+[0m[0m destination_application_security_group_ids = []
              [32m+[0m[0m destination_port_range                     = "*"
              [32m+[0m[0m destination_port_ranges                    = []
              [32m+[0m[0m direction                                  = "Inbound"
              [32m+[0m[0m name                                       = "DenyAllInBound"
              [32m+[0m[0m priority                                   = 4096
              [32m+[0m[0m protocol                                   = "*"
              [32m+[0m[0m source_address_prefix                      = "*"
              [32m+[0m[0m source_address_prefixes                    = []
              [32m+[0m[0m source_application_security_group_ids      = []
              [32m+[0m[0m source_port_range                          = "*"
              [32m+[0m[0m source_port_ranges                         = []
            },
        ]
      [32m+[0m[0m tags                = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
    }

[1m  # azurerm_private_dns_zone.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_private_dns_zone" "aks" {
      [32m+[0m[0m id                                                    = (known after apply)
      [32m+[0m[0m max_number_of_record_sets                             = (known after apply)
      [32m+[0m[0m max_number_of_virtual_network_links                   = (known after apply)
      [32m+[0m[0m max_number_of_virtual_network_links_with_registration = (known after apply)
      [32m+[0m[0m name                                                  = "privatelink.eastus.azmk8s.io"
      [32m+[0m[0m number_of_record_sets                                 = (known after apply)
      [32m+[0m[0m resource_group_name                                   = "rg-aks-spark-prod"
      [32m+[0m[0m tags                                                  = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
    }

[1m  # azurerm_private_dns_zone_virtual_network_link.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_private_dns_zone_virtual_network_link" "aks" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m name                  = "vnet-link-spoke"
      [32m+[0m[0m private_dns_zone_name = "privatelink.eastus.azmk8s.io"
      [32m+[0m[0m registration_enabled  = false
      [32m+[0m[0m resource_group_name   = "rg-aks-spark-prod"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
      [32m+[0m[0m virtual_network_id    = (known after apply)
    }

[1m  # azurerm_resource_group.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "aks" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "eastus"
      [32m+[0m[0m name     = "rg-aks-spark-prod"
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
    }

[1m  # azurerm_route.to_onprem_aws[0m will be created
[0m  [32m+[0m[0m resource "azurerm_route" "to_onprem_aws" {
      [32m+[0m[0m address_prefix      = "10.0.0.0/16"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "route-to-onprem-aws"
      [32m+[0m[0m next_hop_type       = "VirtualNetworkGateway"
      [32m+[0m[0m resource_group_name = "rg-aks-spark-prod"
      [32m+[0m[0m route_table_name    = "rt-aks-expressroute"
    }

[1m  # azurerm_route_table.aks_expressroute[0m will be created
[0m  [32m+[0m[0m resource "azurerm_route_table" "aks_expressroute" {
      [32m+[0m[0m bgp_route_propagation_enabled = true
      [32m+[0m[0m disable_bgp_route_propagation = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "eastus"
      [32m+[0m[0m name                          = "rt-aks-expressroute"
      [32m+[0m[0m resource_group_name           = "rg-aks-spark-prod"
      [32m+[0m[0m route                         = (known after apply)
      [32m+[0m[0m subnets                       = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
    }

[1m  # azurerm_subnet.endpoints[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "endpoints" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.248.27.128/27",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "subnet-endpoints"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "rg-aks-spark-prod"
      [32m+[0m[0m virtual_network_name                           = "vnet-aks-spark-spoke"
    }

[1m  # azurerm_subnet.spark[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "spark" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.248.27.64/26",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "subnet-aks-spark"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "rg-aks-spark-prod"
      [32m+[0m[0m virtual_network_name                           = "vnet-aks-spark-spoke"
    }

[1m  # azurerm_subnet.system[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "system" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.248.27.0/26",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "subnet-aks-system"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "rg-aks-spark-prod"
      [32m+[0m[0m virtual_network_name                           = "vnet-aks-spark-spoke"
    }

[1m  # azurerm_subnet_network_security_group_association.endpoints[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_network_security_group_association" "endpoints" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m network_security_group_id = (known after apply)
      [32m+[0m[0m subnet_id                 = (known after apply)
    }

[1m  # azurerm_subnet_network_security_group_association.spark[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_network_security_group_association" "spark" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m network_security_group_id = (known after apply)
      [32m+[0m[0m subnet_id                 = (known after apply)
    }

[1m  # azurerm_subnet_network_security_group_association.system[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_network_security_group_association" "system" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m network_security_group_id = (known after apply)
      [32m+[0m[0m subnet_id                 = (known after apply)
    }

[1m  # azurerm_subnet_route_table_association.endpoints[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_route_table_association" "endpoints" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # azurerm_subnet_route_table_association.spark[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_route_table_association" "spark" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # azurerm_subnet_route_table_association.system[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_route_table_association" "system" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # azurerm_virtual_network.aks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network" "aks" {
      [32m+[0m[0m address_space       = [
          [32m+[0m[0m "10.248.27.0/24",
        ]
      [32m+[0m[0m dns_servers         = (known after apply)
      [32m+[0m[0m guid                = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "eastus"
      [32m+[0m[0m name                = "vnet-aks-spark-spoke"
      [32m+[0m[0m resource_group_name = "rg-aks-spark-prod"
      [32m+[0m[0m subnet              = (known after apply)
      [32m+[0m[0m tags                = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Workload"    = "ApacheSpark"
        }
    }

[1m  # azurerm_virtual_network_peering.hub_to_spoke[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network_peering" "hub_to_spoke" {
      [32m+[0m[0m allow_forwarded_traffic                = true
      [32m+[0m[0m allow_gateway_transit                  = true
      [32m+[0m[0m allow_virtual_network_access           = true
      [32m+[0m[0m id                                     = (known after apply)
      [32m+[0m[0m name                                   = "peer-net-eastus-hub-to-vnet-aks-spark-spoke"
      [32m+[0m[0m peer_complete_virtual_networks_enabled = true
      [32m+[0m[0m remote_virtual_network_id              = (known after apply)
      [32m+[0m[0m resource_group_name                    = "rg-network-hub"
      [32m+[0m[0m use_remote_gateways                    = false
      [32m+[0m[0m virtual_network_name                   = "net-eastus-hub"
    }

[1mPlan:[0m 23 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cluster_fqdn               = (known after apply)
  [32m+[0m[0m cluster_id                 = (known after apply)
  [32m+[0m[0m cluster_identity           = {
      [32m+[0m[0m principal_id = (known after apply)
      [32m+[0m[0m tenant_id    = (known after apply)
      [32m+[0m[0m type         = "SystemAssigned"
    }
  [32m+[0m[0m cluster_name               = "aks-spark-cluster"
  [32m+[0m[0m cluster_private_fqdn       = (known after apply)
  [32m+[0m[0m key_vault_id               = (known after apply)
  [32m+[0m[0m kube_admin_config_raw      = (sensitive value)
  [32m+[0m[0m log_analytics_workspace_id = (known after apply)
  [32m+[0m[0m node_resource_group        = (known after apply)
  [32m+[0m[0m route_table_id             = (known after apply)
  [32m+[0m[0m subnet_ids                 = {
      [32m+[0m[0m endpoints = (known after apply)
      [32m+[0m[0m spark     = (known after apply)
      [32m+[0m[0m system    = (known after apply)
    }
  [32m+[0m[0m vnet_id                    = (known after apply)
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mArgument is deprecated[0m
[33m│[0m [0m
[33m│[0m [0m[0m  with azurerm_kubernetes_cluster.aks,
[33m│[0m [0m  on aks.tf line 59, in resource "azurerm_kubernetes_cluster" "aks":
[33m│[0m [0m  59:     managed            = [4mtrue[0m[0m
[33m│[0m [0m
[33m│[0m [0mAzure AD Integration (legacy) (https://aka.ms/aks/aad-legacy) is deprecated
[33m│[0m [0mand clusters can no longer be created with the Azure AD integration
[33m│[0m [0m(legacy) enabled. This field must be supplied with the value `true` for
[33m│[0m [0mAKS-managed Entra Integration, but will be removed and defaulted to `true`
[33m│[0m [0mfor the user in v4.0 of the AzureRM Provider.
[33m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mVirtual Network (Subscription: "29f89e9a-3e55-4df8-bf50-eab02e979704"
[31m│[0m [0mResource Group Name: "rg-network-hub"
[31m│[0m [0mVirtual Network Name: "net-eastus-hub") was not found[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with data.azurerm_virtual_network.hub,
[31m│[0m [0m  on peering.tf line 4, in data "azurerm_virtual_network" "hub":
[31m│[0m [0m   4: data "azurerm_virtual_network" "hub" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
